.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "TCP_LISTENER_FROMFD_MEM" "3" "" "libdill" "libdill Library Functions"
.hy
.SH NAME
.PP
tcp_listener_fromfd_mem \- wraps an existing OS\-level file descriptor
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libdill.h>

int\ tcp_listener_fromfd_mem(
\ \ \ \ int\ fd,
\ \ \ \ struct\ tcp_listener_storage*\ mem);
\f[]
.fi
.SH DESCRIPTION
.PP
TCP protocol is a reliable bytestream protocol for transporting data
over network.
It is defined in RFC 793.
.PP
This function wraps an existing OS\-level file descriptor.
.PP
This function allows to avoid one dynamic memory allocation by storing
the object in user\-supplied memory.
Unless you are hyper\-optimizing use \f[B]tcp_listener_fromfd\f[]
instead.
.PP
\f[B]fd\f[]: File descriptor of a listening TCP socket to wrap.
.PP
\f[B]mem\f[]: The structure to store the newly created object in.
It must not be deallocated before the object is closed.
.PP
The socket can be cleanly shut down using \f[B]tcp_close\f[] function
which will also close the underlying file descriptor.
.PP
There\[aq]s no way to unwrap the file descriptor.
.PP
This function is not available if libdill is compiled with
\f[B]\-\-disable\-sockets\f[] option.
.SH RETURN VALUE
.PP
In case of success the function returns newly created socket handle.
In case of error it returns \-1 and sets \f[B]errno\f[] to one of the
values below.
.SH ERRORS
.IP \[bu] 2
\f[B]EMFILE\f[]: The maximum number of file descriptors in the process
are already open.
.IP \[bu] 2
\f[B]ENFILE\f[]: The maximum number of file descriptors in the system
are already open.
.IP \[bu] 2
\f[B]ENOMEM\f[]: Not enough memory.
.SH EXAMPLE
.IP
.nf
\f[C]
int\ fd\ =\ socket(AF_INET,\ SOCK_STREAM,\ 0);
bind(fd,\ addr,\ sizeof(addr));
listen(fd,\ 10);
int\ s\ =\ tcp_listener_fromfd(fd);
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]brecv\f[](3) \f[B]brecvl\f[](3) \f[B]bsend\f[](3)
\f[B]bsendl\f[](3) \f[B]hclose\f[](3) \f[B]tcp_accept\f[](3)
\f[B]tcp_accept_mem\f[](3) \f[B]tcp_close\f[](3) \f[B]tcp_connect\f[](3)
\f[B]tcp_connect_mem\f[](3) \f[B]tcp_done\f[](3) \f[B]tcp_fromfd\f[](3)
\f[B]tcp_fromfd_mem\f[](3) \f[B]tcp_listen\f[](3)
\f[B]tcp_listen_mem\f[](3) \f[B]tcp_listener_fromfd\f[](3)
